/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.muratkuk.nesneproje;

import java.awt.BorderLayout;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;


/**
 *
 * @author muratkuk
 */
public class ParentChart extends javax.swing.JPanel {

    /**
     * Creates new form ParentChart
     */
    private Map<String, Double> userExercises;
    private List<String> usernames;
   
    public ParentChart() {
        usernames = UserCredentials.getChildUsernames();
        userExercises  = new HashMap<>();
        initComponents();
        this.setLayout(new BorderLayout());
        createChart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void createChart(){
        getChartCSVFiles();
        JFreeChart barChart = ChartFactory.createBarChart(
                "Solved Exercises",
                "Username",
                "Exercises",
                createDataset(),
                PlotOrientation.VERTICAL,
                true, true, false);
        
        ChartPanel chartPanel = new ChartPanel(barChart);
        this.add(chartPanel, BorderLayout.CENTER);
        this.revalidate();
        this.repaint();
        
    }
    
    
    private void getChartCSVFiles() {
        File folder = new File(System.getProperty("user.dir"));
        File[] listOfFiles = folder.listFiles();
        double count = 0;
        for(String username:usernames){
            for (File file : listOfFiles) {
                if (file.isFile() && file.getName().startsWith(username) && file.getName().endsWith(".csv")) {
                    count++;
                }
            }
   
            userExercises.put(username, count);
            count = 0;
        }
       
    }
    private DefaultCategoryDataset createDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (Map.Entry mapEleman : userExercises.entrySet()){
            double value =  (double) mapEleman.getValue();
            String val = mapEleman.getKey().toString();
            dataset.addValue(value, val, "");
        }
        return dataset;
    }  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
