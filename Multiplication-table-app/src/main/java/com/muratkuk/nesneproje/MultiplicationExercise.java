/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.muratkuk.nesneproje;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author muratkuk
 */
public class MultiplicationExercise extends javax.swing.JFrame {

    /**
     * Creates new form MultiplicationExercise
     */
    private int a, b, N;
    private int currentQuestion = 1;
    private int score = 0;
    private int randA, randB;
    private int timeElapsed = 0;
    private Timer timer;
    private ExerciseLog exerciseLog;
    private long questionStartTime;
    private DefaultTableModel highScoresModel;
    private HighScoreManager highScoreManager;
    private HashSet<String> previousQuestions = new HashSet<>();
    public MultiplicationExercise(Exercise exercise, String username) {
        this.setLocationRelativeTo(null);
        this.a = exercise.getA();
        this.b = exercise.getB();
        this.N = exercise.getN();
        this.exerciseLog = new ExerciseLog(username, exercise.getName());
        initComponents();
        this.highScoresModel = new DefaultTableModel(new Object[]{"Username", "Speed Score", "Accuracy Score"}, 0);
        highScoresTable.setModel(highScoresModel);
        this.highScoreManager = new HighScoreManager(exercise.getName());
        showQuestion();
        startTimer();
        loadHighScores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressLabel = new javax.swing.JLabel();
        questionLabel = new javax.swing.JLabel();
        nextButton = new javax.swing.JButton();
        answerField = new javax.swing.JTextField();
        scoreLabel = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        highScoresTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Exercise");

        progressLabel.setText("SoruSayisi");

        questionLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        questionLabel.setText("jLabel1");

        nextButton.setText("Submit");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        answerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerFieldActionPerformed(evt);
            }
        });

        scoreLabel.setText("Score : 0");

        timerLabel.setText("Time: 00:00");

        highScoresTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Username", "Speed Score", "Accuracy Score"
            }
        ));
        jScrollPane1.setViewportView(highScoresTable);

        jLabel1.setText("High Scores");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(scoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(questionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(93, 93, 93)
                            .addComponent(answerField, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(173, 173, 173))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(questionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(answerField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(176, 176, 176))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        checkAnswer();
        answerField.setText("");
        if (currentQuestion < N) {
            currentQuestion++;
            showQuestion();
        } else {
            endExercise();
            dispose();  // close the window
        }       
    }//GEN-LAST:event_nextButtonActionPerformed

    private void answerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerFieldActionPerformed
        nextButtonActionPerformed(evt);
    }//GEN-LAST:event_answerFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void showQuestion() {
        Random random = new Random();
        do {
            randA = random.nextInt(a) + 1;
            randB = random.nextInt(b) + 1;
        } while (!previousQuestions.add(randA + "x" + randB));
        questionLabel.setText(randA + "   x   " + randB + "   = ?");
        progressLabel.setText(currentQuestion + " / " + N);
        this.questionStartTime = System.currentTimeMillis();
        timeElapsed = 0;
    }
    
    private void checkAnswer() {
        int userAnswer = Integer.parseInt(answerField.getText());
        boolean correct = userAnswer == (randA * randB);
        if (correct) {
            score++;
            scoreLabel.setText("Score: " + score);
        }

        int responseTime = (int) ((System.currentTimeMillis() - questionStartTime) / 1000);
        exerciseLog.logQuestion(randA + " x " + randB, correct, responseTime);
    }
    private void loadHighScores() {
        highScoresModel.setRowCount(0);
        List<String[]> highScores = highScoreManager.loadHighScores();
        for (String[] highScore : highScores) {
            //highScoresModel.addRow(highScore);
            highScoresModel.addRow(new Object[]{highScore[0], Integer.valueOf(highScore[1]), Integer.valueOf(highScore[2])});
        }
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(highScoresTable.getModel());
        highScoresTable.setRowSorter(sorter);
        Comparator<Integer> scoreComparator = (d1, d2) -> Integer.compare(d2, d1);
        sorter.setComparator(1, scoreComparator); 
        sorter.setComparator(2, scoreComparator); 
        
        sorter.setSortKeys(Arrays.asList(new RowSorter.SortKey(2, SortOrder.ASCENDING), new RowSorter.SortKey(1, SortOrder.ASCENDING)));       
        
        
    }
   
    
    private void endExercise() {
        exerciseLog.endExercise();
        exerciseLog.calculateScores();
        highScoresModel.addRow(new Object[]{
            exerciseLog.getUsername(),
            exerciseLog.getSpeedScore(),
            exerciseLog.getAccuracyScore()
        }); 
        highScoreManager.saveHighScore(
            exerciseLog.getUsername(),
            exerciseLog.getSpeedScore(),
            exerciseLog.getAccuracyScore()
        );
        int ranking = findUserRanking(exerciseLog.getUsername(), exerciseLog.getSpeedScore(), exerciseLog.getAccuracyScore());
        if (ranking != -1) {
            JOptionPane.showMessageDialog(this, "Exercise ended.\n"+exerciseLog.getUsername() + ", you are ranked #" + ranking + " in the high score table!"+"\n"+"Speed Score: " + exerciseLog.getSpeedScore() + ", Accuracy Score: " + exerciseLog.getAccuracyScore());
        } else {
            JOptionPane.showMessageDialog(this,"Could not find your ranking in the high score table.");
        }

        try {
            exerciseLog.saveToFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }    
    private void startTimer() {
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timeElapsed++;
                int minutes = timeElapsed / 60;
                int seconds = timeElapsed % 60;
                timerLabel.setText(String.format("Time: %02d:%02d", minutes, seconds));
            }
        });
        timer.start();
    }
     
   public int findUserRanking(String username, int speedScore, int accuracyScore) {
    for (int i = 0; i < highScoresTable.getRowCount(); i++) {
        String currentUsername = (String) highScoresTable.getValueAt(i, 0);
        int currentSpeedScore = (int) highScoresTable.getValueAt(i, 1);
        int currentAccuracyScore = (int) highScoresTable.getValueAt(i, 2);

        if (currentUsername.equals(username) && currentSpeedScore == speedScore && currentAccuracyScore == accuracyScore) {
            return i + 1;
        }
    }
    return -1;
    }  


   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField answerField;
    private javax.swing.JTable highScoresTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JLabel timerLabel;
    // End of variables declaration//GEN-END:variables
}
